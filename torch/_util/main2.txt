函数“运行模型2”以“tmp_run2__”、“i-&-&-&-c*”。
函数“运行模型3”以“tmp_run3__”、“i-&-&-&-&-&-&-&-c*”。




int tmp_run3__(Devi_* d, Model_* m, In_* in, In_* in1, In_* in2, In_* in3, In_* in4, char* out_path) {
	Out_ *o1 = new Out_(), *o2 = new Out_();
	{
		c10::optional<torch::Tensor> tensorRec0;
		c10::optional<torch::Tensor> tensorRec1;
		c10::optional<torch::Tensor> tensorRec2;
		c10::optional<torch::Tensor> tensorRec3;

		std::vector<torch::IValue> v {};
		v.push_back(in->h_);
		v.push_back(in1->h3_);
		v.push_back(in2->h3_);
		v.push_back(in3->h3_);
		v.push_back(in4->h3_);
		v.push_back(0.4);
		auto outputs =  m->h_.forward(v).toList();
		
		/*const auto &fgr = outputs.get(0).toTensor();
		const auto &pha = outputs.get(1).toTensor();*/
		o1->h_ = outputs.get(0).toTensor();
		o2->h_ = outputs.get(1).toTensor();
		
		/*in1->h3_ = outputs.get(2).toTensor();
		in2->h3_ = outputs.get(3).toTensor();
		in3->h3_ = outputs.get(4).toTensor();
		in4->h3_ = outputs.get(5).toTensor();*/
	}
	{
		auto pha = o2->h_, fgr = o1->h_;
		auto tensorTargetBgr = torch::tensor({
			120.f / 255, 255.f / 255, 155.f / 255
		}).toType(torch::kFloat16).to(*d->h_).view({
			1, 3, 1, 1
		});
		auto res_tensor = pha * fgr + (1 - pha) * tensorTargetBgr;

		res_tensor = res_tensor.mul(255).permute({ 0,2,3,1 })[0].to(torch::kU8).contiguous().cpu();
		cv::Mat comp(cv::Size(res_tensor.size(1), res_tensor.size(0)), CV_8UC3, res_tensor.data_ptr());
		cv::imwrite(out_path, comp);
	}
	return 1;
}

int tmp_run2__(Devi_* d, Model_* m, In_* in, char* out_path) {
	auto device = *d->h_;
	auto precision = torch::kFloat16;
	auto downsampleRatio = 0.4;
	c10::optional<torch::Tensor> tensorRec0;
	c10::optional<torch::Tensor> tensorRec1;
	c10::optional<torch::Tensor> tensorRec2;
	c10::optional<torch::Tensor> tensorRec3;

	auto model = m->h_;
	auto tensorSrc = in->h_;

	std::vector<torch::IValue> v {};
	v.push_back(tensorSrc);
	v.push_back(tensorRec0);
	v.push_back(tensorRec1);
	v.push_back(tensorRec2);
	v.push_back(tensorRec3);
	v.push_back(downsampleRatio);
	auto outputs = model.forward(v).toList();
	
	const auto &fgr = outputs.get(0).toTensor();
	const auto &pha = outputs.get(1).toTensor();
	tensorRec0 = outputs.get(2).toTensor();
	tensorRec1 = outputs.get(3).toTensor();
	tensorRec2 = outputs.get(4).toTensor();
	tensorRec3 = outputs.get(5).toTensor();

	auto tensorTargetBgr = torch::tensor({
		120.f / 255, 255.f / 255, 155.f / 255
	}).toType(precision).to(device).view({
		1, 3, 1, 1
	});
	auto res_tensor = pha * fgr + (1 - pha) * tensorTargetBgr;

	res_tensor = res_tensor.mul(255).permute({ 0,2,3,1 })[0].to(torch::kU8).contiguous().cpu();
	cv::Mat comp(cv::Size(res_tensor.size(1), res_tensor.size(0)), CV_8UC3, res_tensor.data_ptr());
	cv::imwrite(out_path, comp);

	return 1;
}
